#!/usr/bin/env python3
# 统一配置管理工具

import argparse
import json
import os
import random
import string
import sys

CONFIG_DIR = os.path.join(os.path.dirname(__file__), "../conf")
TEMPLATE_DIR = os.path.join(CONFIG_DIR, "templates")
OUTPUT_DIR = os.path.join(CONFIG_DIR, "generated")

def generate_password(length=16):
    """生成随机密码"""
    chars = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(random.choice(chars) for _ in range(length))

def load_template(protocol):
    """加载配置模板"""
    template_path = os.path.join(TEMPLATE_DIR, f"{protocol}.json.tpl")
    try:
        with open(template_path, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Template for {protocol} not found!")
        sys.exit(1)

def render_template(template, **kwargs):
    """渲染模板变量"""
    config_str = json.dumps(template)
    for key, value in kwargs.items():
        placeholder = f"{{{{{key}}}}}"
        config_str = config_str.replace(placeholder, str(value))
    return json.loads(config_str)

def save_config(config, filename):
    """保存配置到文件"""
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    output_path = os.path.join(OUTPUT_DIR, filename)
    
    with open(output_path, "w") as f:
        json.dump(config, f, indent=2)
    
    return output_path

def main():
    parser = argparse.ArgumentParser(description="统一配置管理器")
    parser.add_argument("--protocol", required=True, help="协议名称")
    parser.add_argument("--output", default="config.json", help="输出文件名")
    parser.add_argument("--set", action="append", help="设置键值对 (key=value)")
    
    args = parser.parse_args()
    
    # 处理自定义参数
    params = {}
    if args.set:
        for item in args.set:
            if "=" not in item:
                print(f"Invalid parameter format: {item}")
                sys.exit(1)
            key, value = item.split("=", 1)
            params[key] = value
    
    # 自动生成必要字段
    auto_fields = {
        "password": generate_password,
        "port": lambda: random.randint(10000, 60000)
    }
    
    for field, generator in auto_fields.items():
        if field not in params:
            params[field] = generator()
    
    # 生成配置
    template = load_template(args.protocol)
    config = render_template(template, **params)
    
    # 保存配置
    output_path = save_config(config, args.output)
    print(f"Configuration generated at: {output_path}")

if __name__ == "__main__":
    main()